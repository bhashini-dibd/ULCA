#!groovy
import hudson.model.*

node('server_build_slave')  {

try {

   stage('Checkout'){

      checkout scm
   }
stage('compress build folder')
withCredentials([usernamePassword(credentialsId: 'anuvaad-docker-hub-credentials', passwordVariable: 'dockerhub_pass', usernameVariable: 'dockerhub_user')])
{
sh '''
cd frontend/main/webapp
if [ -d "$(pwd)/build" ]
then
  sudo rm -rf $(pwd)/build
fi
docker rm -f $JOB_BASE_NAME || true
#if [  $( docker ps -q -f status=exited --filter "name=$JOB_BASE_NAME" ) ]
#then
#docker rm "$JOB_BASE_NAME"
#fi
docker rm -f $JOB_BASE_NAME || true
#docker run --env REACT_APP_GNMT_ADAPTER_TRANSLATE_ENDPOINT=$gnmt_endpoint --env REACT_APP_GNMT_ADAPTER_HOST=$gnmt_host --env REACT_APP_AAI4B_NMT_HOST=$aai4b_host --env REACT_APP_AAIB_NMT_TRANSLATE_ENDPOINT=$aaib_nmt_endpoint --env REACT_APP_NMT_TRANSLATE_ENDPOINT=$nmt_translate_endpoint --env REACT_APP_NMT_HOST=$nmt_host --env REACT_APP_BASE_URL=$base_url --env REACT_APP_APIGW_BASE_URL=$apigw_url --env REACT_APP_INTRO_URL=$intro_url --env REACT_APP_SOCKET_URL=$socket_url --env REACT_APP_DOWNLOAD_URL=$download_url --env REACT_APP_DASHBOARD_URL=$dashboard_url --env REACT_APP_CLIENT_ID=$client_id -v $(pwd):/opt --name "$JOB_BASE_NAME" anuvaadio/anuvaad-node-npm6.14.8-base:1 /bin/sh -c "cd /opt && rm -rf package-lock.json && npm install --legacy-peers-deps && npm run build"
docker run --env REACT_APP_GNMT_ADAPTER_TRANSLATE_ENDPOINT=$gnmt_endpoint --env REACT_APP_GNMT_ADAPTER_HOST=$gnmt_host --env REACT_APP_AAI4B_NMT_HOST=$aai4b_host --env REACT_APP_AAIB_NMT_TRANSLATE_ENDPOINT=$aaib_nmt_endpoint --env REACT_APP_NMT_TRANSLATE_ENDPOINT=$nmt_translate_endpoint --env REACT_APP_NMT_HOST=$nmt_host --env REACT_APP_BASE_URL=$base_url --env REACT_APP_APIGW_BASE_URL=$apigw_url --env REACT_APP_INTRO_URL=$intro_url --env REACT_APP_SOCKET_URL=$socket_url --env REACT_APP_DOWNLOAD_URL=$download_url --env REACT_APP_DASHBOARD_URL=$dashboard_url --env REACT_APP_CLIENT_ID=$client_id -v $(pwd):/opt --name "$JOB_BASE_NAME" anuvaadio/anuvaad-node-npm6.14.8-base:1 /bin/sh -c "cd /opt/ && rm -rf package-lock.json && npm cache clean --force && npm install moment && npm install --legacy-peers-deps && npm run build && rm -rf node_modules/.cache"
docker rm "$JOB_BASE_NAME"
commit_id=${BUILD_ID}-$(git rev-parse --short HEAD)
echo $commit_id> commit_id.txt
docker build -t anuvaadio/$image_name:$commit_id .
docker login -u $dockerhub_user -p $dockerhub_pass
docker push anuvaadio/$image_name:$commit_id
'''

def matcher = manager.getLogMatcher(".*push anuvaadio.(.*).*")
def buildMsg = matcher.group(1)
manager.addShortText(buildMsg)
        }


}

catch (err) {
    currentBuild.result = "FAILURE"
    throw err
 }



}
