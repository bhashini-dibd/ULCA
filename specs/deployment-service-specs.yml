openapi: 3.0.0
info:
  title: ULCA - service schema
  description: The documentation defines the model.
  contact:
    name: ekstep foundation
    email: contact@ekstep.org
  version: 1.0.0
servers:
  - url: /ulca
paths: {}
components:
  schemas:
    Service:
      required:
        - name
        - version
        - description
        - task
        - languages
        - license
        - domain
        - submitter
        - inferenceEndPoint
        - trainingDataset
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: service name that you want your users to see
          example: Hindi Conformer ASR
        version:
          maxLength: 20
          minLength: 1
          type: string
          description: version for the service
          example: v1
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: brief description about service, its features, basically something special about it
          example: Indic-Conformer deployed by AI4Bharat for Hindi language
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the service
          example: https://github.com/AI4Bharat
        task:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelTask
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
      
    InferenceAPIEndPoint:
      required:
        - callbackUrl
        - schema
      type: object
      description: hosted location defines the end point of the model inference. specify a taskType along with Inference type
      properties:
        callbackUrl:
          type: string
          format: url
        inferenceApiKey:
          required:
            - value
          type: object
          description: if endpoint needs authorization in headers to fetch output
          properties:
            name:
              type: string
              description: expected if the callbackurl requires an API key with a particular name. `Authorization` will be considered as default name if value is provided without a name
              default: Authorization
              example: apiKey
            value:
              type: string
              description: expected if the callbackurl requires an API key so as to fetch output
              example: dde19858-b354-4e24-8e92-a7a4b320c066
        isMultilingualEnabled:
          type: boolean
          default: false
          description: specify true if the same callbackUrl is capable of handling multiple languages
        supportedInputFormats:
          anyOf:
            - $ref: '#/components/schemas/AudioFormats'
            - $ref: '#/components/schemas/TextFormats'
        supportedOutputFormats:
          anyOf:
            - $ref: '#/components/schemas/AudioFormats'
            - $ref: '#/components/schemas/TextFormats'
        
        schema:
             $ref: '#/components/schemas/InferenceSchemaArray'
        isSyncApi:
          type: boolean
          description: specify true if the inference is a sync api, false otherwise. when false, specify the polling url and related properties
        asyncApiDetails:
          $ref: '#/components/schemas/AsyncApiDetails'
        providerName:
          maxLength: 100
          minLength: 5
          type: string
          description: name of the service provider
          example: Dhruva
        serviceId:
          maxLength: 100
          minLength: 5
          type: string
          description: specific id for the service
          example: Dhruva
        infraDescription:
          maxLength: 100
          minLength: 5
          type: string
          description: Details regarding the model hosted infrastructure
          example: Auto-scalable deployment, using T4 GPUs
        inferenceModelId:
          maxLength: 100
          minLength: 5
          type: string
          description: expected if the callbackurl requires an API key so as to test it
          example: dde19858-b354-4e24-8e92-a7a4b320c066

    InferenceSchema:
        oneOf:
        - $ref: '#/components/schemas/TranslationInference'
        - $ref: '#/components/schemas/TransliterationInference'
        - $ref: '#/components/schemas/ASRInference'
        - $ref: '#/components/schemas/TTSInference'
        - $ref: '#/components/schemas/OCRInference'
        - $ref: '#/components/schemas/TxtLangDetectionInference'
        - $ref: '#/components/schemas/NerInference'
        - $ref: '#/components/schemas/AudioLangDetectionInference'
        discriminator:
          propertyName: taskType
          mapping:
            translation: '#/components/schemas/TranslationInference'
            transliteration: '#/components/schemas/TransliterationInference'
            asr: '#/components/schemas/ASRInference'
            tts: '#/components/schemas/TTSInference'
            ocr: '#/components/schemas/OCRInference'
            txt-lang-detection: '#/components/schemas/TxtLangDetectionInference'
            ner: '#/components/schemas/NerInference'
            audio-lang-detection: '#/components/schemas/AudioLangDetectionInference'
    InferenceSchemaArray:
          type: array
          items:
            $ref: '#/components/schemas/InferenceSchema'
    AsyncApiDetails:
      required:
        - pollingUrl
        - pollInterval
      type: object
      properties:
        pollingUrl:
          type: string
          format: url
          description: endpoint specified for polling in async calls
        pollInterval:
          type: integer
          description: polling interval in millisec to check for status
        asyncApiSchema:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TranslationAsyncInference'
            - $ref: '#/components/schemas/ASRAsyncInference'
            - $ref: '#/components/schemas/TTSAsyncInference'
            - $ref: '#/components/schemas/OCRAsyncInference'
          discriminator:
            propertyName: taskType
            mapping:
              translation: '#/components/schemas/TranslationAsyncInference'
              asr: '#/components/schemas/ASRAsyncInference'
              tts: '#/components/schemas/TTSAsyncInference'
              ocr: '#/components/schemas/OCRAsyncInference'
        asyncApiPollingSchema:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TranslationAsyncPollingInference'
            - $ref: '#/components/schemas/ASRAsyncPollingInference'
            - $ref: '#/components/schemas/TTSAsyncPollingInference'
            - $ref: '#/components/schemas/OCRAsyncPollingInference'
          discriminator:
            propertyName: taskType
            mapping:
              translation: '#/components/schemas/TranslationAsyncPollingInference'
              asr: '#/components/schemas/ASRAsyncPollingInference'
              tts: '#/components/schemas/TTSAsyncPollingInference'
              ocr: '#/components/schemas/OCRAsyncPollingInference'
      description: async api details
    FileUploadAPIEndPoint:
      required:
        - callbackUrl
        - schema
      type: object
      properties:
        callbackUrl:
          type: string
          format: url
        schema:
          type: object
          oneOf:
            - $ref: '#/components/schemas/FileUploadRequest'
      description: hosted location of the file which would be sent for the validation of the Inference API endpoint.
    TrainingDataset:
      required:
        - description
      type: object
      properties:
        datasetId:
          type: string
          description: dataset identifier that has been exported from ULCA system, passing this information makes your model enriched with further information for the community
        description:
          type: string
          description: explain your dataset that you have used for training your model
      description: training dataset metadata used to train the model
    TranslationInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/TranslationRequest'
        response:
          $ref: '#/components/schemas/TranslationResponse'
    TransliterationInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/TransliterationRequest'
        response:
          $ref: '#/components/schemas/TransliterationResponse'
    TxtLangDetectionInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/TxtLangDetectionRequest'
        response:
          $ref: '#/components/schemas/TxtLangDetectionResponse'
    AudioLangDetectionInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/AudioLangDetectionRequest'
        response:
          $ref: '#/components/schemas/AudioLangDetectionResponse'
    NerInference:
      required:
        - taskType
        - request
        - tagsFormat
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        tagsFormat:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTagsFormat
        request:
          $ref: '#/components/schemas/TranslationRequest'
        response:
          $ref: '#/components/schemas/NerResponse'
    TranslationAsyncInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/TranslationRequest'
        response:
          $ref: '#/components/schemas/PollingRequest'
    TranslationAsyncPollingInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/PollingRequest'
        response:
          $ref: '#/components/schemas/TranslationResponse'
    PollingRequest:
      required:
        - requestId
      type: object
      properties:
        requestId:
          type: string
          description: Unique identifier of request
          example: 29837456239a87
    TranslationRequest:
      required:
        - input
        - config
      type: object
      properties:
        input:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    TranslationResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    TransliterationRequest:
      required:
        - input
        - config
      type: object
      properties:
        input:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TransliterationConfig'
    TransliterationResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/SentencesList'
        config:
          $ref: '#/components/schemas/TransliterationConfig'
    TxtLangDetectionRequest:
      required:
        - input
        - config
      type: object
      properties:
        input:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/LangDetectionConfig'
    TxtLangDetectionResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/TxtLanguagesList'
        config:
          $ref: '#/components/schemas/LangDetectionConfig'
    AudioLangDetectionRequest:
      required:
        - audio
        - config
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/AudioFiles'
        config:
          $ref: '#/components/schemas/LangDetectionConfig'
    AudioLangDetectionResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/AudioLanguagesList'
        config:
          $ref: '#/components/schemas/LangDetectionConfig'
    NerResponse:
      description: the response for NER.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/NerList'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    ASRInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/ASRRequest'
        response:
          $ref: '#/components/schemas/ASRResponse'
    ASRAsyncInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/ASRRequest'
        response:
          $ref: '#/components/schemas/PollingRequest'
    ASRAsyncPollingInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/PollingRequest'
        response:
          $ref: '#/components/schemas/ASRResponse'
    ASRRequest:
      required:
        - audio
        - config
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/AudioFiles'
        config:
          $ref: '#/components/schemas/AudioConfig'
    ASRResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    TTSInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/TTSRequest'
        response:
          $ref: '#/components/schemas/TTSResponse'
    TTSAsyncInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/TTSRequest'
        response:
          $ref: '#/components/schemas/PollingRequest'
    TTSAsyncPollingInference:
      required:
        - taskType
        - modelProcessingType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        modelProcessingType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelProcessingType
        request:
          $ref: '#/components/schemas/PollingRequest'
        response:
          $ref: '#/components/schemas/TTSResponse'
    TTSRequest:
      required:
        - input
        - config
      type: object
      properties:
        input:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TTSConfig'
    TTSResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - audio
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/AudioFiles'
        config:
          $ref: '#/components/schemas/AudioConfig'
    OCRInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/OCRRequest'
        response:
          $ref: '#/components/schemas/OCRResponse'
    OCRAsyncInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/OCRRequest'
        response:
          $ref: '#/components/schemas/PollingRequest'
    OCRAsyncPollingInference:
      required:
        - taskType
        - request
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        request:
          $ref: '#/components/schemas/PollingRequest'
        response:
          $ref: '#/components/schemas/OCRResponse'
    OCRRequest:
      required:
        - image
        - config
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ImageFiles'
        config:
          $ref: '#/components/schemas/OCRConfig'
    OCRResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/OCRConfig'
    FileUploadRequest:
      type: object
      properties:
        fileName:
          type: string
          format: binary
    Sentences:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/Sentence'
    Sentence:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          minLength: 1
          type: string
          description: to be used along with translation model. expected translated sentence, for reference
    SentencesList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/SentenceList'
    SentenceList:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          type: array
          description: list of sentences
          items:
            type: string
            minItems: 1
    TxtLanguagesList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/TxtLangDetectionList'
    TxtLangDetectionList:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        langPrediction:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/LangDetectionPrediction'
    AudioLanguagesList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/AudioLangDetectionList'
    AudioLangDetectionList:
      required:
        - langPrediction
      type: object
      properties:
        langPrediction:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/LangDetectionPrediction'
    LangDetectionPrediction:
      type: object
      required:
        - langCode
      properties:
        langCode:
          type: string
          description: Indic language code, iso-639-1, iso 639-2
        ScriptCode:
          type: string
          description: Script code, iso-15924
        langScore:
          type: number
          description: the measure of accuracy of language prediction
    NerList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/NerOutputList'
    NerOutputList:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        nerPrediction:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/NerPrediction'
    NerPrediction:
      type: object
      required:
        - token
        - tag
      properties:
        token:
          type: string
          description: corresponding word in the sentence which is tagged
        tag:
          type: string
          description: Ner tag associated with selected word
        score:
          type: number
          description: the measure of accuracy of language prediction
        tokenIndex:
          type: number
          description: the index number of particular token in sentence
        tokenStartIndex:
          type: number
          description: the starting index of word in sentence
        tokenEndIndex:
          type: number
          description: the ending index of word in sentence
    TranslationConfig:
      required:
        - language
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
    TransliterationConfig:
      required:
        - language
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        numSuggestions:
          type: integer
          description: expected number of predictions
          example: 4
        isSentence:
          type: boolean
          description: Expects sentence or words
          default: false
          example: false
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
    LangDetectionConfig:
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        isSentence:
          type: boolean
          description: Expects sentence or words
          default: false
          example: false
        numSuggestions:
          type: integer
          description: expected number of predictions
          example: 4
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
    OCRConfig:
      required:
        - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: 103
        detectionLevel:
          type: string
          description: on what level of text does the model works best
          default: word
          enum:
            - word
            - line
            - paragraph
            - page
        modality:
          type: string
          description: on what type of image does the model works best
          default: print
          enum:
            - print
            - handwritten
            - scenetext
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
    TTSConfig:
      required:
        - language
        - gender
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: 103
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        gender:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Gender
        samplingRate:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioSampleRate
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
    AudioConfig:
      required:
        - language
        - audioFormat
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: 103
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        audioFormat:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioFormat
        channel:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioChannel
        samplingRate:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioSampleRate
        bitsPerSample:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioBitsPerSample
        transcriptionFormat:
          $ref: '#/components/schemas/TranscriptionFormat'
        inputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
           $ref: '#/components/schemas/SupportedFormats'
        postProcessors:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioPostProcessors
        domain:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Domain
        detailed:
          type: boolean
          description: to specify whether details are required in output like SNR, sampling rate
        punctuation:
          type: boolean
          example: true
        model:
          type: string
          enum:
            - command_and_search
            - phone_call
            - video
            - default
        encoding:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Encoding
    TranscriptionFormat:
      type: object
      properties:
        value:
          type: string
          description: format of ASR output
          enum:
            - srt
            - transcript
            - alternatives
    ImageFiles:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/ImageFile'
    ImageFile:
      required:
        - imageContent | imageUri
      type: object
      properties:
        imageContent:
          type: string
          description: image content
          format: byte
        imageUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/testimg.jpeg
    AudioFiles:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/AudioFile'
    AudioFile:
      required:
        - audioContent | audioUri
      type: object
      properties:
        audioContent:
          type: string
          description: audio content with audio duration <= 1min
          format: byte
        audioUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/audio.wav
    ASRRecognitionStatus:
      type: object
      properties:
        value:
          type: string
          description: status of ASR response
          enum:
            - success
            - no-match
            - initial-silence-timeout
            - babble-timeout
            - error
    ASRRecognitionDetails:
      type: object
      properties:
        channelTag:
          type: integer
          description: For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For audioChannelCount = N, its output values can range from '1' to 'N'
        languageCode:
          type: string
          description: This language code was detected to have the most likelihood of being spoken in the audio
        snr:
          type: integer
          description: sound to noise ratio of audio
        samplingRate:
          type: integer
          description: sampling rate of audio
        bitsPerSample:
          type: integer
          description: bitsPerSample rate of audio
    AudioFormats:
      type: object
      properties:
        audio:
          type: array
          default: [wav]
          description: list of
          items:
            $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioFormat
    TextFormats:
      type: object
      properties:
        text:
          type: array
          default: [raw-text]
          description: list of
          items:
            $ref: '#/components/schemas/TextFormat'
    TextFormat:
      type: string
      description: supported textual formats
      enum:
        - srt
        - transcript
        - webvtt
        - alternatives
    ImageFormat:
      type: string
      description: image file format description
      example: png
      enum:
        - jpeg
        - bmp
        - png
        - tiff
    AudioFormat:
      type: string
      description: audio format of the audio file
      example: flac
      enum:
        - wav
        - pcm
        - mp3
        - flac
        - sph
    SupportedFormats:
      anyOf:
            - $ref: '#/components/schemas/AudioFormat'
            - $ref: '#/components/schemas/TextFormat'
            - $ref: '#/components/schemas/ImageFormat'
  securitySchemes:
    authToken:
      type: apiKey
      description: token issued by authenticating the user
      name: auth-token
      in: header