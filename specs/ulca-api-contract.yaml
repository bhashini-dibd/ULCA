openapi: 3.0.1
info:
  title: Unified Language Contribution API (ULCA) documentation
  description: 'The ULCA API documentation defines a core set of interfaces that enables users and communities to contribute AI/ML datasets to build a large, open Indic languages resource ecosystem. The dataset contributions are primarily geared toward the area of NLP, ASR/TTS and OCR. The documentation proposes core set of interfaces where various AI based models can be hosted, referenced and benchmarked. The interfaces enables entire community to participate, collaborate and track key benchmark parameters.'
  contact:
    name: Ministry of Electronics and Information Technology
    url: https://bhashini.gov.in/ulca
  version: 0.8.0
servers:
- url: https://meity-auth.ulcacontrib.org 
  description: Production server (uses live data)
paths:
  /ulca/apis/v0/dataset/corpus/submit:
    post:
      tags:
        - dataset
      operationId: datasetSubmit
      summary: Api to training dataset
      description: Api to upload training dataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSubmitRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetSubmitResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/corpus/search:
    post:
      tags:
      - dataset
      operationId: corpusSearch
      summary: Api to search training dataset
      description: Api to search training dataset based on different criteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCorpusSearchRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetCorpusSearchResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/listByUserId:
    get:
      tags:
        - dataset
      operationId: listByUserId
      summary: Api to dataset submitted by user
      description: Api to dataset submitted by user
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: Indic Trans English-Hindi
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetListByUserIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/getByServiceRequestNumber:
    get:
      tags:
      - dataset
      operationId: datasetByServiceRequestNumber
      summary: Api to fetch dataset serviceRequestNumber
      description: Api to fetch dataset serviceRequestNumber
      parameters:
      - name: serviceRequestNumber
        in: query
        required: true
        schema:
          type: string
        example: 1144238572
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetByServiceReqNrResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/getByDatasetId:
    get:
      tags:
      - dataset
      operationId: datasetById
      summary: Api to fetch dataset by datasetId
      description: Api to fetch dataset datasetId
      parameters:
      - name: datasetId
        in: query
        required: true
        schema:
          type: string
        example: 62019355394b3a48f83f814e
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetByIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/corpus/search/status:
    get:
      tags:
      - dataset
      operationId: searchStatus
      summary: Api to fetch status of search corpus dataset
      description: fetch status of search corpus dataset
      parameters:
      - name: serviceRequestNumber
        in: query
        required: true
        schema:
          type: string
        example: 2244238572
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetSearchStatusResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/corpus/search/listByUserId:
    get:
      tags:
      - dataset
      operationId: searchListByUserId
      summary: Api to fetch all of search corpus dataset by userId
      description: fetch all of search corpus dataset by userId
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchListByUserIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/upload:
    post:
      tags:
      - model
      operationId: uploadModel
      summary: Api to upload model json file
      description: upload the model file in json format
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
        example:
          userId: 164972ebd9a54f39a97a67bae55162ea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              example:
                type: /Users/XYZ/Desktop/VakyanshASR-English.json
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadModelResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/tryMe:
    post:
      tags:
        - model
      operationId: tryMeOcrImageContent
      summary: Api to detect the text in image file
      description: upload the image file to detect the text
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/OCRResponse
                
  /ulca/apis/v1/model/compute:
    post:
      tags:
        - ASR Compute
      summary: REST API dedicated for ASR compute
      description: Compute API for ASR audio content and audio url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modelcomputeRequest'
        required: true
      responses:
        '200':
          description: ASR audio computed successfully
          content:
            '*/*':
              schema:
                $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/ASRResponse
        '400':
          description: On input errors request body errors, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error' 

  /ulca/apis/v0/model/status/change:
    post:
      tags:
        - model
      operationId: changeStatus
      summary: Api to publish/unpublish a model
      description: changes the status of model to publish and unpublish and also accepts reason of unpublish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelStatusChangeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelStatusChangeResponse'

  /ulca/apis/v0/model/search:
    post:
      tags:
      - model
      operationId: searchModel
      summary: Api to search model
      description: searches the model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelSearchRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelSearchResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/feedback/submit:
    post:
      tags:
        - model
      operationId: modelFeedbackSubmit
      summary: Api to provide feedback for model
      description: users can provide feedback for model after try
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelFeedbackSubmitRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelFeedbackSubmitResponse'

  /ulca/apis/v0/model/compute:
    post:
      tags:
      - model
      operationId: computeModel
      summary: Api to compute the model inference end point result
      description: model inference end point is fetched
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelComputeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelComputeResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
                

  /ulca/apis/v0/model/listByUserId:
    get:
      tags:
        - model
      operationId: modelListByUserId
      summary: Api to get model by userId or search model of that user by model name
      description: list of model of logged-in user and/or search models of logged-in user by model name
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: 6a73afa4fc774dcdb28d5fff944511f6
           
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
          
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: IndicTrans
        
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelListByUserIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

                
  /ulca/apis/v0/model/getModel:
    get:
      tags:
        - model
      operationId: getModel
      summary: Api to fetch model on modelId
      description: fetch the model details by passing modelId
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
          example: 61c14e928112f94aa569c688
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelListResponseDto'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
                
  /ulca/apis/v0/model/getModelHealthStatus:
    get:
      tags:
        - model
      operationId: getHealthStatus
      summary: Api to fetch list of available models
      description: fetch list of available models
      parameters:
        - name: taskType
          in: query
          required: false
          schema:
            type: string
          example: translation
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelHealthStatusResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/feedback/getByTaskType:
    get:
      tags:
        - model
      operationId: getModelFeedbackByTaskType
      summary: Api to fetch model feedback by taskType
      description: fetch model feedback by taskType
      parameters:
        - name: taskType
          in: query
          required: true
          schema:
            type: string
          example: translation
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetModelFeedbackListResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

      
  /ulca/apis/v0/model/feedback/getByModelId:
    get:
      tags:
        - model
      operationId: getModelFeedbackByModelId
      summary: Api to fetch model feedback by modelId
      description: fetch model feedback by modelId
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
          example: 61c380072e74fa406e7618ba
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelFeedback'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'


  /ulca/apis/v0/benchmark/submit:
    post:
      tags:
        - benchmark
      operationId: submitBenchmark
      summary: Api to submit the benchmark dataset
      description: Api to submit the benchmark dataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkSubmitRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkSubmitResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/search:
    post:
      tags:
        - benchmark
      operationId: searchBenchmark
      summary: Api to search the benchmark dataset
      description: Api to search the benchmark dataset
      parameters:
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
           
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkSearchRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkSearchResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/getByTask:
    post:
      tags:
        - benchmark
      operationId: listBytask
      summary: Api to fetch the benchmark dataset on taskType
      description: Api to search the benchmark dataset based on taskType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkListByModelRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkListByModelResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/execute:
    post:
      tags:
        - benchmark
      operationId: executeBenchmark
      summary: Api to run benchmark process against a benchmark dataset
      description: Api to run benchmark process against a benchmark dataset for one metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteBenchmarkRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExecuteBenchmarkResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/execute/allMetric:
    post:
      tags:
        - benchmark
      operationId: executeBenchmarkAllMetric
      summary: Api to run benchmark process against a benchmark dataset for all metric available
      description: Api to run benchmark process against a benchmark dataset for all metric available
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteBenchmarkAllMetricRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExecuteBenchmarkResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/process/status:
    get:
      tags:
        - benchmark
      operationId: processStatus
      summary: Api to fetch status of benchmark process
      description: fetch status of benchmark process by benchmarkProcessId
      parameters:
        - name: benchmarkProcessId
          in: query
          required: true
          schema:
            type: string
          example: 3338807029
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BmProcessListByProcessIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/listByUserId:
    get:
      tags:
        - benchmark
      operationId: listByUserId_1
      summary: Api to fetch benchamrk dataset list by userId
      description: fetch benchamrk dataset list by userId or search the benchmark dataset by name
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: 61c380072e74fa406e7618ba
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: Indic benchmark dataset
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkListByUserIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'


  /ulca/apis/v0/benchmark/getBenchmark:
    get:
      tags:
        - benchmark
      operationId: getBenchmarkById
      summary: Api to fetch benchamrk dataset list by benchmarkId
      description: fetch benchamrk dataset list by benchmarkId
      parameters:
        - name: benchmarkId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetBenchmarkByIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
  
  
  
  
  
  
                
  #Pipeline Apis Start
    
  /ulca/apis/v0/model/explorePipelines:
    get: 
      tags: 
        - model
      operationId: explorePipelines
      summary: Api to fetch pipeline models
      description: fetch all pipeline model
      parameters:
        - name: serviceProviderName
          in: query
          required: false
          schema:
            type: string
          example: AI4Bharat  
        
      responses:
        '200':
          description: OK
          content: 
            '*/*':
              schema: 
               $ref: '#/components/schemas/PipelinesResponse'  
                
                
  /ulca/apis/v0/model/getModelsPipeline:
    post : 
      tags:
         - model
      operationId: getModelsPipeline
      summary: Api to fetch model models pipeline
      description: fetch pipeline by userId and ulcaApiKey
      parameters :
        - name: userID
          in: header
          required: true
          schema: 
            type: string
          example: 61c38007
        - name: ulcaApiKey
          in: header
          required: true
          schema: 
            type: string
          example: 61c380072e74fa4

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineRequest'
            
                     
      
      responses:
       '200':
         description: OK
         content:
           '*/*':
              schema:
                $ref: '#/components/schemas/PipelineResponse'  
    
    
  #Pipeline Apis End

  /ulca/mdms/v0/fetch-master:
    post:
      tags:
        - fetch masters
      summary: REST API to fetch master
      description: fetch master
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMasterRequest'
        required: true
      responses:
        '200':
          description: master data fetched successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors request body errors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'  
  /ulca/mdms/v0/fetch-master/bulk:
    post:
      tags:
        - fetch masters in bulk
      summary: REST API to fetch master in bulk
      description: fetch master
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchMasterBulkRequest'
        required: true
      responses:
        '200':
          description: Bulk master data fetched successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors request body errors, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'  
  /ulca/mdms/v0/bust-cache:
    post:
      tags:
        - load/get cache of master data 
      summary: REST API to load/get cache of master data 
      description: load/get cache of master data 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BustCacheRequest'
        required: true
      responses:
        '200':
          description: Read data from redis successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors request body errors, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'  
  /ulca/mdms/v0/pipelineQuestions:
    post:
      tags:
        - Get pipeLine questions
      summary: REST API to get pipeline questions
      description: get pipeline questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipelineQuestionsRequest'
        required: true
      responses:
        '200':
          description: pipeline questions fetched successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors request body errors, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'  
  
  /v1/users/signup:
    post:
      tags:
        - Create Users
      summary: REST API to register/create new user
      description: register/create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
        required: true
      responses:
        '200':
          description: New user is created successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/getApiKeys:
    post:
      tags:
        - Get User Api Key
      summary: REST API to get user api key
      description: Fetch user api key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetApiKeyRequest'
        required: true
      responses:
        '200':
          description: UserApiKey found successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: users not found, user cannot be empty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/dataTrackingToggle:
    post:
      tags:
        - Toggle DataTracking key
      summary: REST API to toggle datatracking key
      description: toggle datatracking key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataTrackingToggleRequest'
        required: true
      responses:
        '200':
          description: Toggled data successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Coul not toggle data, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/generateServiceProviderKey:
    post:
      tags:
        - generate service provider key
      summary: REST API to generate service provider key
      description: generate service provider key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateServiceProviderKeyRequest'
        required: true
      responses:
        '200':
          description: generated service provide key successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Coul not generate data, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/removeServiceProviderKey:
    post:
      tags:
        - remove service provider key
      summary: REST API to remove service provider key
      description: remove service provider key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeServiceProviderKeyRequest'
        required: true
      responses:
        '200':
          description: removed data successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Coul not remove data, all parameters are required.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/generateApiKey:
    post:
      tags:
        - Generate Ulca Api Key
      summary: REST API to generate ulca api key
      description: Fetch user api key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generateApiKeyRequest'
        required: true
      responses:
        '200':
          description: UlcaApiKey generated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: could not generate ulcaApiKey appName and userID is required
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'

  /v1/users/getApiKeysForProfile:
    post:
      tags:
        - Get User Service provider Key
      summary: REST API to get Service provider Key
      description: Fetch user api key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getApiKeysForProfileRequest'
        required: true
      responses:
        '200':
          description: UserApiKey found successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: users not found, user cannot be empty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/revokeApiKey:
    post:
      tags:
        - Revoke User Ulca Api Key
      summary: REST API to Revoke User Ulca Api Key
      description: Revoke User Ulca Api Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/revokeApiKeyRequest'
        required: true
      responses:
        '200':
          description: UserApiKey revoked successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: users not found, user cannot be empty
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/users/verify-user:
    post:
      tags:
        - Verify Users
      summary: REST API to verify user account.
      description: Verify user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerificationRequest'
        required: true
      responses:
        '200':
          description: User has verified successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserVerificationResponse'
        '400':
          description: On input errors causing failure in user verification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user verification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/api-key-search:
    post:
      tags:
        - Api-key-search
      summary: REST API key for search
      description: search using key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeySearchRequest'
        required: true
      responses:
        '200':
          description: apiKey search is successful.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiKeySearchResponse'
        '400':
          description: On input errors causing failure in auth token search.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in auth token search.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/login:
    post:
      tags:
        - Login
      summary: REST API to login
      description: login to existing/new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Logged in successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: On input errors causing failure in user login.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user login.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/forgot-password:
    post:
      tags:
        - Forgot Password
      summary: REST API for forgot password request
      description: request to change password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      responses:
        '200':
          description: User has notfied successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in user notification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user notification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v1/users/reset-password:
    post:
      tags:
        - Reset Password
      summary: REST API for resetting password
      description: Reset forgotten password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: Password updated successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in password resetting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in password resetting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v0/error/report:
    post:
      tags:
        - Report Errors
      summary: 'REST API to get a downloadable reports on errors '
      description: download error reports
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReportRequest'
        required: true
      responses:
        '200':
          description: Request successfull.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorReportResponse'
        '400':
          description: On input errors causing failure reporting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in reporting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
                
components:
  schemas:
    #Pipeline schema start
    
    #ExplorePipeline Start
    PipelinesResponse:
      type: object
      properties:
        data: 
          $ref: '#/components/schemas/PipelineModelResponse'
        totalCount:
          type: integer
          format: int32
          example: 1
          
    PipelineModelResponse:
      type: object
      properties:
        pipelineId:
          type: string 
          example: 34b4ehehjdjj3j3j3
        name:
          type: string 
          example: Ai4Bharat Pipeline
        description:
          type: string 
          example: Ai4Bharat Pipeline model with all all supported pipelines
        serviceProviderName:
          type: string
          example: AI4Bharat
        supportedTasks:
          type: array
          items:
            $ref: '#/components/schemas/PipelineTaskSequence'
          
          
    #ExplorePipeline End
    
    #PipelineModel start
    

    PipelineInference:
      required:
        - name
        - version
        - description
        - refUrl
        - domain
        - serviceProvider
        - supportedPipelines
        - taskSpecifications
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 3
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        version:
          maxLength: 20
          minLength: 1
          type: string
          description: version for the model
          example: v1
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: brief description about model, its goal, basically something sweet about it
          example: Speech recognition model for classroom lecture
        domain:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Domain
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        serviceProvider:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Submitter
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        inferenceSocketEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        supportedPipelines:
          $ref: '#/components/schemas/ListOfPipelines'
        taskSpecifications:
          $ref: '#/components/schemas/TaskSpecifications'
        apiEndPoints:
          $ref: '#/components/schemas/ApiEndPoint'
    ListOfPipelines:
      type: array
      items:
        $ref: '#/components/schemas/PipelineTaskSequence'
    PipelineTaskSequence:
      type: array
      items:
        anyOf: null
        $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
    InferenceAPIEndPoint:
      required:
        - callbackUrl
      type: object
      properties:
        callbackUrl:
          type: string
          format: url
        masterApiKey:
          required:
            - value
          type: object
          description: if endpoint needs authorization in headers to fetch output
          properties:
            name:
              type: string
              description: expected if the callbackurl requires an API key with a particular name. `Authorization` will be considered as default name if value is provided without a name
              default: Authorization
              example: apiKey
            value:
              type: string
              description: expected if the callbackurl requires an API key so as to fetch output
              example: dde19858-b354-4e24-8e92-a7a4b320c066
        isMultilingualEnabled:
          type: boolean
          default: false
          description: specify true if the same callbackUrl is capable of handling multiple languages
        isSyncApi:
          type: boolean
          description: specify true if the inference is a sync api, false otherwise. when false, specify the polling url and related properties
        asyncApiDetails:
          required:
            - pollingUrl
            - pollInterval
          type: object
          properties:
            pollingUrl:
              type: string
              format: url
              description: endpoint specified for polling in async calls
            pollInterval:
              type: integer
              description: polling interval in millisec to check for status
      description: hosted location defines the end point of the model inference. specify a taskType along with Inference type. `NOTE:` Either of inferenceEndPoint or inferenceSocketEndPoint is is mandatory at submission time
    
    # InferenceAPIEndPointDto start
    InferenceAPIEndPointDto:
      type: object
      properties:
        masterApiKey:
          required:
            - value
          type: object
          description: if endpoint needs authorization in headers to fetch output
          properties:
            name:
              type: string
              description: expected if the callbackurl requires an API key with a particular name. `Authorization` will be considered as default name if value is provided without a name
              default: Authorization
              example: apiKey
            value:
              type: string
              description: expected if the callbackurl requires an API key so as to fetch output
              example: dde19858-b354-4e24-8e92-a7a4b320c066
        isMultilingualEnabled:
          type: boolean
          default: false
          description: specify true if the same callbackUrl is capable of handling multiple languages
        isSyncApi:
          type: boolean
          description: specify true if the inference is a sync api, false otherwise. when false, specify the polling url and related properties
        asyncApiDetails:
          required:
            - pollingUrl
            - pollInterval
          type: object
          properties:
            pollingUrl:
              type: string
              format: url
              description: endpoint specified for polling in async calls
            pollInterval:
              type: integer
              description: polling interval in millisec to check for status
      description: hosted location defines the end point of the model inference. specify a taskType along with Inference type. `NOTE:` Either of inferenceEndPoint or inferenceSocketEndPoint is is mandatory at submission time
    
    
    # InferenceAPIEndPointDto End
    
    
    TaskSpecifications:
      type: array
      items:
        $ref: '#/components/schemas/TaskSpecification'
    TaskSpecification:
      required:
        - taskType
        - taskConfig
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        taskConfig:
          $ref: '#/components/schemas/ConfigList'
    ConfigList:
      type: array
      items:
        $ref: '#/components/schemas/ConfigSchema'
    ConfigSchema:
      required:
        - modelId
        - serviceId
        - sourceLanguage
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: 63c9586ea0e5e81614ff96a8
        serviceId:
          type: string
          description: specific id for the service
          example: ai4bharat/speech-to-speech-gpu--t4
        sourceLanguage:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedLanguages
        targetLanguage:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedLanguages
        sourceScriptCode:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedScripts
        targetScriptCode:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedScripts
    ApiEndPoint:
      required:
        - apiKeyUrl
        - feedbackUrl
      type: object
      properties:
        apiKeyUrl:
          description: URL to generate api keys (using POST Method) , delete api keys (using DELETE method) and toggle data logging( using PATCH Method).
          type: string
          format: url
        feedbackUrl:
          description: URL to give feedback regarding pipeline (using POST Method)
          type: string
          format: url
    
    #PipelineModel End
    
    #PipelineRequest Start
    
    PipelineRequest:
      required:
        - pipelineTasks
        - pipelineRequestConfig
      type: object
      properties:
        pipelineTasks:
          $ref: '#/components/schemas/PipelineTasks'
        pipelineRequestConfig:
          $ref: '#/components/schemas/PipelineConfig'
    PipelineResponse:
      required:
        - pipelineResponseConfig
        - languages
      type: object
      properties:
        languages:
          $ref: '#/components/schemas/LanguagesList'
        pipelineResponseConfig:
          $ref: '#/components/schemas/TaskSchemaList'
        
        feedbackUrl:
          description: URL to give feedback regarding pipeline
          type: string
          format: url
          example: https://feedback.url.com
        pipelineInferenceAPIEndPoint:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/PipelineInferenceAPIEndPoint
        pipelineInferenceSocketEndPoint:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/PipelineInferenceAPIEndPoint
      # anyOf:  
      #   - properties:
      #     pipelineInferenceAPIEndPoint:
      #       $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/model-schema.yml#/components/schemas/PipelineInferenceAPIEndPoint
      #     required: [pipelineInferenceAPIEndPoint] 
      #   - properties:
      #     pipelineInferenceSocketEndPoint:
      #       $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/model-schema.yml#/components/schemas/PipelineInferenceAPIEndPoint
      #     required: [pipelineInferenceSocketEndPoint] 
    PipelineConfig:
      required:
        - pipelineId
      type: object
      properties:
        pipelineId:
          type: string
          description: ID of the pipeline submitter
          example: AI4BharatID
    PipelineTask:
      oneOf:
        - $ref: '#/components/schemas/TranslationTask'
        - $ref: '#/components/schemas/TransliterationTask'
        - $ref: '#/components/schemas/ASRTask'
        - $ref: '#/components/schemas/TTSTask'
      discriminator:
        propertyName: taskType
        mapping:
          translation: '#/components/schemas/TranslationTask'
          transliteration: '#/components/schemas/TransliterationTask'
          asr: '#/components/schemas/ASRTask'
          tts: '#/components/schemas/TTSTask'
    PipelineTasks:
      type: array
      items:
        $ref: '#/components/schemas/PipelineTask'
    TranslationTask:
      required:
        - taskType
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          $ref: '#/components/schemas/TranslationRequestConfig'
    TransliterationTask:
      required:
        - taskType
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          $ref: '#/components/schemas/TransliterationRequestConfig'
    ASRTask:
      required:
        - taskType
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          $ref: '#/components/schemas/ASRRequestConfig'
    TTSTask:
      required:
        - taskType
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          $ref: '#/components/schemas/TTSRequestConfig'
    TranslationRequestConfig:
      required:
        - language
      type: object
      properties:
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
    TransliterationRequestConfig:
      required:
        - language
      type: object
      properties:
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
    TTSRequestConfig:
      required:
        - language
      type: object
      properties:
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        gender:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Gender
    ASRRequestConfig:
      required:
        - language
      type: object
      properties:
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
    LanguageSchema:
      type: object
      properties:
        sourceLanguage:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedLanguages
        targetLanguageList:
          type: array
          default:
            - en
          description: list of
          items:
            $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedLanguages
    TaskSchema:
      oneOf:
        - $ref: '#/components/schemas/TranslationTaskInference'
        - $ref: '#/components/schemas/TransliterationTaskInference'
        - $ref: '#/components/schemas/ASRTaskInference'
        - $ref: '#/components/schemas/TTSTaskInference'
      discriminator:
        propertyName: taskType
        mapping:
          translation: '#/components/schemas/TranslationTaskInference'
          transliteration : '#/components/schemas/TransliterationTaskInference'
          asr: '#/components/schemas/ASRTaskInference'
          tts: '#/components/schemas/TTSTaskInference'
    TaskSchemaList:
      type: array
      items:
        $ref: '#/components/schemas/TaskSchema'
    LanguagesList:
      type: array
      items:
        $ref: '#/components/schemas/LanguageSchema'
    TranslationTaskInference:
      required:
        - taskType
        - config
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/TranslationResponseConfig'
            
    TransliterationTaskInference:
      required:
        - taskType
        - config
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/TransliterationResponseConfig'
            
    ASRTaskInference:
      required:
        - taskType
        - config
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/ASRResponseConfig'
    TTSTaskInference:
      required:
        - taskType
        - config
      type: object
      properties:
        taskType:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        config:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/TTSResponseConfig'
    TranslationResponseConfig:
      required:
        - language
        - serviceId
        - modelId
      type: object
      properties:
        serviceId:
          type: string
          description: Unique identifier of model
          example: 103
        modelId:
          type: string
          description: Unique identifier of model
          example: 63c9586ea0e5e81614ff96a8
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        inputFormat:
          $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
          $ref: '#/components/schemas/SupportedFormats'
    TransliterationResponseConfig:
      required:
        - language
        - serviceId
        - modelId
      type: object
      properties:
        serviceId:
          type: string
          description: Unique identifier of model
          example: 103
        modelId:
          type: string
          description: Unique identifier of model
          example: 63c9586ea0e5e81614ff96a8
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        inputFormat:
          $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
          $ref: '#/components/schemas/SupportedFormats'
    TTSResponseConfig:
      required:
        - language
        - serviceId
        - modelId
      type: object
      properties:
        serviceId:
          type: string
          description: Unique identifier of model
          example: 103
        modelId:
          type: string
          description: Unique identifier of model
          example: 63c9586ea0e5e81614ff96a8
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        supportedVoices:
          type: array
          description: list of
          example:
            - male
            - female
          items:
            $ref: '#/components/schemas/VoiceTypes'
        samplingRate:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioSampleRate
        inputFormat:
          $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
          $ref: '#/components/schemas/SupportedFormats'
    ASRResponseConfig:
      required:
        - language
        - serviceId
        - modelId
      type: object
      properties:
        serviceId:
          type: string
          description: Unique identifier of model
          example: 103
        modelId:
          type: string
          description: Unique identifier of model
          example: 63c9586ea0e5e81614ff96a8
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        audioFormat:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioFormat
        channel:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioChannel
        samplingRate:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioSampleRate
        bitsPerSample:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioBitsPerSample
        transcriptionFormat:
          $ref: '#/components/schemas/TranscriptionFormat'
        inputFormat:
          $ref: '#/components/schemas/SupportedFormats'
        outputFormat:
          $ref: '#/components/schemas/SupportedFormats'
        postProcessors:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioPostProcessors
        domain:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Domain
        detailed:
          type: boolean
          description: to specify whether details are required in output like SNR, sampling rate
        punctuation:
          type: boolean
          example: true
        model:
          type: string
          enum:
            - command_and_search
            - phone_call
            - video
            - default
        encoding:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Encoding
    TranscriptionFormat:
      type: object
      properties:
        value:
          type: string
          description: format of ASR output
          enum:
            - srt
            - transcript
            - webvtt
            - alternatives
            - raw-text
    TextFormat:
      type: string
      description: supported textual formats
      enum:
        - srt
        - transcript
        - webvtt
        - alternatives
        - raw-text
    AudioFormat:
      type: string
      description: audio format of the audio file
      example: flac
      enum:
        - wav
        - pcm
        - mp3
        - flac
        - sph
    VoiceTypes:
      type: string
      description: supported types of voices
      enum:
        - male
        - female
    SupportedFormats:
      anyOf:
        - $ref: '#/components/schemas/AudioFormat'
        - $ref: '#/components/schemas/TextFormat'
        - $ref: '#/components/schemas/TextFormat'
    
    #PipelineRequest End
    
    
  
    #Pipeline Schema End
  
    DatasetSubmitRequest:
      required:
        - datasetName
        - url
        - userId
      type: object
      properties:
        userId:
          type: string
          example: 6a73afa4fc774dcdb28d5fff944511f6
        datasetName:
          type: string
          example: Indic trans English-Hindi
        url:
          type: string
          example: https://anuvaad-raw-datasets.s3-us-west-2.amazonaws.com/ulca-asr-ds-positive-testcase-03.zip
          
        
    DatasetSubmitData:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          example: 1144238572
        datasetId:
          type: string
          example: 62019355394b3a48f83f814e
        timestamp:
          type: string
          example: Mon Aug 29 11:08:40 IST 2022
          
    DatasetSubmitResponse:
      type: object
      properties:
        message:
          type: string
          example: Dataset Submit success
        data:
          $ref: '#/components/schemas/DatasetSubmitData'

    DatasetCorpusSearchRequest:
      required:
        - criteria
      type: object
      properties:
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        datasetType:
          type: string
          enum:
            - parallel-corpus
            - monolingual-corpus
            - transliteration-corpus
            - asr-corpus
            - tts-corpus
            - asr-unlabeled-corpus
            - ocr-corpus
            - document-layout-corpus
            - glossary-corpus
          example: parallel-corpus
        criteria:
          $ref: '#/components/schemas/SearchCriteria'

    SearchCriteria:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          example: 1144238572
        datasetType:
          type: string
          example: parallel-corpus
        userId:
          type: string
          example: 6a73afa4fc774dcdb28d5fff944511f6
        sourceLanguage:
          type: array
          items:
            type: string
          example: ["en"]
           
        targetLanguage:
          type: array
          items:
            type: string
          example: ["hi"]
          
        collectionMethod:
          type: array
          items:
            type: string
      
        alignmentTool:
          type: array
          items:
            type: string
          example: ["LaBSE"]
        editingTool:
          type: array
          items:
            type: string
          example: ["microsoft excel"]
          
        translationModel:
          type: array
          items:
            type: string
          example: ["google translation"]
        license:
          type: array
          items:
            type: string
          example: ["cc-by-4.0"]
        domain:
          type: array
          items:
            type: string
          example: ["news"]
        datasetId:
          type: array
          items:
            type: string
          example: ["62019355394b3a48f83f814e"]
        channel:
          type: array
          items:
            type: string
          example: ["wav"]
        gender:
          type: array
          items:
            type: string
          example: ["male"]
        format:
          type: array
          items:
            type: string
          example: ["wav"]
        bitsPerSample:
          type: array
          items:
            type: string
          example: ["sixteen"]
        dialect:
          type: array
          items:
            type: string
          example: ["hi-thethi"]
        snrTool:
          type: array
          items:
            type: string
        collectionDescription:
          type: array
          items:
            type: string
          example: ["auto-aligned"]
        ocrTool:
          type: array
          items:
            type: string
          example: ["LaBSE version 3.0"]
        dpi:
          type: array
          items:
            type: string
          example: ["300_dpi"]
        imageTextType:
          type: array
          items:
            type: string
          example: ["scene-text"]
          
        collectionSource:
          type: string
          example: ["https://main.sci.gov.in"]
        submitterName:
          type: string
          example: Dr. Raghav
        minScore:
          type: number
          format: float
        maxScore:
          type: number
          format: float
        score:
          type: number
          format: float
        samplingRate:
          type: number
          format: float
        countOfTranslations:
          type: integer
          format: int32
        minNoOfSpeakers:
          type: integer
          format: int32
        maxNoOfSpeakers:
          type: integer
          format: int32
        noOfSpeakers:
          type: integer
          format: int32
        minAge:
          type: integer
          format: int32
          example: 22
        maxAge:
          type: integer
          format: int32
          example: 35
        age:
          type: integer
          format: int32
          example: 18
        multipleContributors:
          type: boolean
          example: false
        originalSourceSentence:
          type: boolean
          example: false
        groupBy:
          type: boolean
          example: false

    DatasetCorpusSearchResponseData:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          example: 1144238572
        timestamp:
          type: string
          example: 2022-09-02T12:19:33.050+00:00
          
    DatasetCorpusSearchResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/DatasetCorpusSearchResponseData'

    DatasetListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Dataset List By userId
        data:
          type: array
          items:
            $ref: '#/components/schemas/DatasetListByUserIdResponseDto'
        count:
          type: integer
          format: int32
          example: 20
        totalCount:
          type: integer
          format: int32
          example: 192
        startPage:
          type: integer
          format: int32
          example: 1
        endPage:
          type: integer
          format: int32
          example: 2
          
    DatasetListByUserIdResponseDto:
      type: object
      properties:
        datasetId:
          type: string
          example: 62019355394b3a48f83f814e
        serviceRequestNumber:
          type: string
          example: 1144238572
        datasetName:
          type: string
          example: Indic Trans English-Hindi
        datasetType:
          type: string
          example: parallel-corpus
        submittedOn:
          type: string
          example: Mon Aug 29 11:08:40 IST 2022
        status:
          type: string
          example: Completed

  
    DatasetByServiceReqNrResponse:
      type: object
      properties:
        message:
          type: string
          example: Dataset details
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskTracker'
    Error:
      type: object
      properties:
        code:
          type: string
          description: Code of the error
          example: 500
        message:
          type: string
          description: Description of the error
          example: Internal Server Error
        cause:
          type: object
          description: Additional details related to the cause of the error
        report:
          type: string
          description: Link to the error report file
          example: 
      description: Task Tracker entity
    
    TaskTracker:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          description: Unique identifier of the service request
          example: 1169212231
        tool:
          type: string
          description: Tool updating this data
          enum:
          - download
          - pseudo
          - ingest
          - validate
          - publish
          - search
          - delete
          example: download
        id:
          type: string
          example: 62565849cddf941574b12c1a
        status:
          type: string
          description: Status of the task
          example: Completed
        details:
          type: string
          description: Details of the current status of the task
        startTime:
          type: string
          description: ISO timestamp of the instance of the start of process
          example: Tue Feb 08 03:17:01 IST 2022
        endTime:
          type: string
          description: ISO timestamp of the instance of the end of process
          example: Tue Feb 08 03:17:01 IST 2022
        lastModified:
          type: string
          description: ISO timestamp of the instance of the end of process
          example: Tue Feb 08 03:17:01 IST 2022
        error:
          $ref: '#/components/schemas/Error'
      description: Task Tracker entity

    DatasetByIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Dataset Details
        data:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TaskTracker'
          example:
            '1124190703':
              - serviceRequestNumber: '1124190703'
                tool: download
                id: 62cbc2bd72ec8a2af32f09ed
                status: Completed
                details:
                startTime: Mon Jul 11 11:57:09 IST 2022
                endTime: Mon Jul 11 11:57:13 IST 2022
                lastModified:
                error:
              - serviceRequestNumber: '1124190703'
                tool: ingest
                id: 62cbc2c8b106cf28431ee7ab
                status: Completed
                details: '{"timeStamp":"Mon Jul 11 11:57:20 IST 2022","processedCount":[{"count":4,"type":"success"},{"count":0,"type":"failed"}]}'
                startTime: Mon Jul 11 11:57:20 IST 2022
                endTime: Mon Jul 11 11:57:20 IST 2022
                lastModified: Mon Jul 11 11:57:20 IST 2022
                error:
              - serviceRequestNumber: '1124190703'
                tool: validate
                id:
                status: Pending
                details:
                startTime:
                endTime:
                lastModified:
                error:
              - serviceRequestNumber: '1124190703'
                tool: publish
                id:
                status: Pending
                details:
                startTime:
                endTime:
                lastModified:
                error:
        
    DatasetSearchStatusData:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          example: 2224190703
        timestamp:
          type: string
          example: Mon Jul 11 11:38:15 IST 2022
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        status:
          $ref: '#/components/schemas/TaskTracker'

    DatasetSearchStatusResponse:
      type: object
      properties:
        message:
          type: string
          example: Search status
        data:
          $ref: '#/components/schemas/DatasetSearchStatusData'
    
    SearchListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Search List
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchListByUserIdResponseDto'
        count:
          type: integer
          format: int32
          example: 10
        startPage:
          type: integer
          format: int32
          example: 1
        endPage:
          type: integer
          format: int32
          example: 2
    SearchListByUserIdResponseDto:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          example: 2243175285
        timestamp:
          type: string
          example: Mon Jul 05 11:45:25 IST 2021
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        status:
          type: array
          items:
            $ref: '#/components/schemas/TaskTracker'
            
    ASRConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
        audioFormat:
          type: string
          enum:
          - wav
          - pcm
          - mp3
          - flac
        channel:
          type: string
          enum:
          - mono
          - stereo
        samplingRate:
          type: number
        bitsPerSample:
          type: string
          enum:
          - sixteen
          - eight
        transcriptionFormat:
          $ref: '#/components/schemas/TranscriptionFormat'
        profanityFilter:
          type: boolean
          example: true
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        detailed:
          type: boolean
          description: "to specify whether details are required in output like SNR,\
            \ sampling rate"
        punctuation:
          type: boolean
          example: true
        model:
          type: string
          enum:
          - command_and_search
          - phone_call
          - video
          - default
    ASRFile:
      type: object
      properties:
        audioContent:
          type: array
          description: audio content with audio duration <= 1min
          items:
            type: string
            description: audio content with audio duration <= 1min
            format: byte
        audioUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/audio.wav
    ASRInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/ASRRequest'
          response:
            $ref: '#/components/schemas/ASRResponse'
    ASRRequest:
      required:
      - audio
      - config
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/ASRFile'
        config:
          $ref: '#/components/schemas/ASRConfig'
    ASRResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TranslationConfig'

    Contributor:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 5
          type: string
          description: human name of the contributor
        oauthId:
          $ref: '#/components/schemas/OAuthIdentity'
        aboutMe:
          type: string
          description: describing the contributor

    

    LanguagePair:
      required:
      - sourceLanguage
      type: object
      properties:
        sourceLanguageName:
          type: string
          description: human name associated with the language code
          example: English
        sourceLanguage:
          type: string
          description: "Indic language code, iso-639-1, iso 639-2"
          enum:
          - en
          - hi
          - mr
          - ta
          - te
          - kn
          - gu
          - pa
          - bn
          - ml
          - as
          - brx
          - doi
          - ks
          - kok
          - mai
          - mni
          - ne
          - or
          - sd
          - si
          - ur
          - sat
          - lus
          - njz
          - pnr
          - kha
          - grt
          - sa
        targetLanguageName:
          type: string
          description: human name associated with the language code
          example: Hindi
        targetLanguage:
          type: string
          description: "Indic language code, iso-639-1, iso 639-2"
          enum:
          - en
          - hi
          - mr
          - ta
          - te
          - kn
          - gu
          - pa
          - bn
          - ml
          - as
          - brx
          - doi
          - ks
          - kok
          - mai
          - mni
          - ne
          - or
          - sd
          - si
          - ur
          - sat
          - lus
          - njz
          - pnr
          - kha
          - grt
          - sa
      description: "language pair, make targetLanguage null to reuse the object to\
        \ indicate single language"

    ModelExtended:
      required:
        - description
        - domain
        - inferenceEndPoint
        - languages
        - license
        - name
        - submitter
        - task
        - trainingDataset
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: >-
            brief description about model, its goal, basically something sweet
            about it
          example: Speech recognition model for classroom lecture
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
        licenseUrl:
          type: string
          description: url of the custom license
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        submitter:
          $ref: '#/components/schemas/Submitter'
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
        modelId:
          type: string
        version:
          type: string
        userId:
          type: string
        submittedOn:
          type: string
        publishedOn:
          type: string
        status:
          type: string
        unpublishReason:
          type: string
          
    ModelTask:
      $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/ModelTask
      example: 
        type: translation  

    OAuthIdentity:
      type: object
      properties:
        identifier:
          type: string
          description: system identification for the contributor
        oauthId:
          type: string
          description: "popular social network identifier, typically identifier returned\
            \ after auth"
        provider:
          type: string
          description: user authentication provider
          enum:
          - custom
          - github
          - facebook
          - instagram
          - google
          - yahoo
    OCRConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
    OCRInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/OCRRequest'
          response:
            $ref: '#/components/schemas/OCRResponse'
    OCRRequest:
      required:
      - config
      - imageUri
      type: object
      properties:
        imageUri:
          type: array
          description: list of paths on gcp/s3 bucket or https url
          example: gs://bucket/testimg.jpeg
          items:
            type: string
            description: list of paths on gcp/s3 bucket or https url
            example: gs://bucket/testimg.jpeg
        config:
          $ref: '#/components/schemas/OCRConfig'
    
    OCRResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/OCRConfig'

    OneOfInferenceAPIEndPointSchema:
      required:
      - taskType
      type: object
      properties:
        taskType:
          type: string
      discriminator:
        propertyName: taskType


    Submitter:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 5
          type: string
          description: Name of the Submitter
          example: Dr. Raghav
        oauthId:
          $ref: '#/components/schemas/OAuthIdentity'
        aboutMe:
          type: string
          description: Describing the Submitter
        team:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/Contributor'
      description: the schema of data file uploaded should adhere to this specified
        structure.
    TTSConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
    TTSInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/TTSRequest'
          response:
            $ref: '#/components/schemas/TTSResponse'
    TTSRequest:
      required:
      - config
      - input
      type: object
      properties:
        input:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TTSConfig'

    TTSResponse:
      description: the response for translation. Standard http status codes to be used.
      required:
        - audio
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/AudioFiles'
        config:
          $ref: '#/components/schemas/AudioConfig'

    AudioFiles:
      type: array
      description: list of AudioFile
      items:
        $ref: '#/components/schemas/AudioFile'

    AudioFile:
      required:
        - audioContent | audioUri
      type: object
      properties:
        audioContent:
          type: string
          description: audio content with audio duration <= 1min
          format: byte
        audioUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/audio.wav

    AudioConfig:
      required:
        - language
        - audioFormat
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: 103
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
        audioFormat:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioFormat
        channel:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioChannel
        samplingRate:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioSampleRate
        bitsPerSample:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioBitsPerSample
        transcriptionFormat:
          $ref: '#/components/schemas/TranscriptionFormat'
        postProcessors:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/AudioPostProcessors
        domain:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Domain
        detailed:
          type: boolean
          description: to specify whether details are required in output like SNR, sampling rate
        punctuation:
          type: boolean
          example: true
        model:
          type: string
          enum:
            - command_and_search
            - phone_call
            - video
            - default
        encoding:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/Encoding
    

    TrainingDataset:
      required:
      - description
      type: object
      properties:
        datasetId:
          type: string
          description: "dataset identifier that has been exported from ULCA system,\
            \ passing this information makes your model enriched with further information\
            \ for the community"
        description:
          type: string
          description: explain your dataset that you have used for training your model
      description: training dataset metadata used to train the model
    

    TranslationInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/TranslationRequest'
          response:
            $ref: '#/components/schemas/TranslationResponse'
    TranslationRequest:
      required:
      - config
      - input
      type: object
      properties:
        input:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TranslationConfig'

    TranslationResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/Sentences'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    

    TranslationConfig:
      required:
        - language
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
          
    UploadModelResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/ModelExtended'
    
    ModelStatusChangeRequest:
      type: object
      properties:
        userId:
          type: string
        modelId:
          type: string
        status:
          type: string
          enum:
            - published
            - unpublished
        unpublishReason:
          type: string
      example:
        userId: 164972ebd9a54f39a97a67bae55162ea
        modelId: 61c380072e74fa406e7618ba
        status: unpublished
        unpublishReason: running benchmark
    
    ModelStatusChangeResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: Model unpublished successfull.
    
    ModelSearchRequest:
      required:
        - task
      type: object
      properties:
        task:
          type: string
        sourceLanguage:
          type: string
        targetLanguage:
          type: string
      example:
        task: translation
        sourceLanguage: en
        targetLanguage: hi

    ModelSearchResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelExtended'
        count:
          type: integer
          format: int32
    ModelFeedbackSubmitRequest:
      required:
        - taskType
      type: object
      properties:
        taskType:
          type: string
        modelId:
          type: string
        userId:
          type: string
        input:
          type: string
        output:
          type: string
        feedback:
          type: object
        detailedFeedback:
          type: array
          items:
            $ref: '#/components/schemas/ModelFeedbackSubmitRequest'
      example:
        taskType: translation
        input: how are you today ?
        output: இன்று நீங்கள் எப்படி இருக்கிறீர்கள்?
        feedback:
          - feedbackQuestion: Are you satisfied with this translation?
            feedbackQuestionResponse: 3
          - feedbackQuestion: Add your comments
            feedbackQuestionResponse: translation is good
          - suggestedOutput: null
          - feedbackQuestion: Rate Translated Text Quality
            feedbackQuestionResponse: true
        detailedFeedback: []
        userId: 6a73afa4fc774dcdb28d5fff944511f6
        
    FeedbackData:
      type: object
      properties:
        feedbackId:
          type: string
    ModelFeedbackSubmitResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/FeedbackData'
      example:
        message: model feedback submitted successful
        data: 
          feedbackId: 61c380072e74fa406e7618ba

    Input:
      type: object
      properties:
        source:
          type: string

    ModelComputeRequest:
      required:
        - modelId
      oneOf:
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/TranslationRequestInput
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/TransliterationRequestInput
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/TTSRequestInput
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/OCRRequestInput
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/TxtLangDetectionRequestInput
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/compute-pipeline-schemas.yml#/components/schemas/NerRequestInput
      
        
      type: object
      properties:
        modelId:
          type: string
        userId:
          type: string
        task:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/SupportedTasks
        gender:
          type : string
          description: TTS specific field to specify gender
          enum:
            - male
            - female
        
        
      example:
        modelId: 641d1d6592a6a31751ff1f49
        userId: 6a73afa4fc774dcdb28d5fff944511f6
        task: translation
        input: [{"source":"How are you?"}]
  
    ModelComputeResponse:
      type: object
      oneOf:
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/TranslationResponse
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/TransliterationResponse
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/TTSResponse
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/OCRResponse
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/TxtLangDetectionResponse
        - $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/specs-changes/specs/model-schema.yml#/components/schemas/NerResponse
      

    Sentences:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/Sentence'
    
    Sentence:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          minLength: 1
          type: string
          description: to be used along with translation model. expected translated sentence, for reference
    
    SentencesList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/SentenceList'
    
    SentenceList:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          type: array
          description: list of sentences
          items:
            type: string
            minItems: 1

    TransliterationResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/SentencesList'
        config:
          $ref: '#/components/schemas/TransliterationConfig'
    
    TransliterationConfig:
      required:
        - language
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        numSuggestions:
          type: integer
          description: expected number of predictions
          example: 4
        isSentence:
          type: boolean
          description: Expects sentence or words
          default: false
          example: false
        language:
          $ref: https://raw.githubusercontent.com/bhashini-dibd/ulca/master/specs/common-schemas.yml#/components/schemas/LanguagePair
    
    TxtLangDetectionResponse:
      description: the response for translation.  Standard http status codes to be used.
      required:
        - output
      type: object
      properties:
        output:
          $ref: '#/components/schemas/TxtLanguagesList'
        config:
          $ref: '#/components/schemas/TxtLangDetectionConfig'
    
    TxtLanguagesList:
      type: array
      description: list of
      items:
        $ref: '#/components/schemas/TxtLangDetectionList'
    
    TxtLangDetectionList:
      required:
        - source
      type: object
      properties:
        source:
          minLength: 1
          type: string
          description: input sentence for the model
        langPrediction:
          type: array
          description: list of
          items:
            $ref: '#/components/schemas/TxtLangDetectionPrediction'
    
    TxtLangDetectionPrediction:
      type: object
      required:
        - langCode
      properties:
        langCode:
          type: string
          description: Indic language code, iso-639-1, iso 639-2
        ScriptCode:
          type: string
          description: Script code, iso-15924
        langScore:
          type: number
          description: the measure of accuracy of language prediction

    TxtLangDetectionConfig:
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          example: 103
        isSentence:
          type: boolean
          description: Expects sentence or words
          default: false
          example: false
        numSuggestions:
          type: integer
          description: expected number of predictions
          example: 4

    ModelListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelListResponseUserId'
        count:
          type: integer
          format: int32
          example: 10
        totalCount:
          type: integer
          format: int32
          example: 172
          
    #ModelListByUserId      
    ModelListResponseUserId:
      required:
        - modelId
        - name
        - userId
        - version
        - task
        - domain
        - license
        - status
        - submittedOn
        - metric
        - benchmarkPerformance
        
      type: object
      properties:
        metric:
          type: array
          items:
            type: string
          example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
        benchmarkPerformance:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: >-
            brief description about model, its goal, basically something sweet
            about it
          example: Speech recognition model for classroom lecture
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
        licenseUrl:
          type: string
          description: url of the custom license
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        submitter:
          $ref: '#/components/schemas/Submitter'
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        version:
          type: string
          example: v1.0
        userId:
          type: string
          example: 61c380072e74fa406e7618ba
        submittedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        publishedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        status:
          type: string
          example: unpublished
        unpublishReason:
          type: string
          example: executing benchmark runs

          
     
    ModelListResponseDto:
      required:
        - description
        - domain
        - inferenceEndPoint
        - languages
        - license
        - name
        - submitter
        - task
        - trainingDataset
      type: object
      properties:
        metric:
          type: array
          items:
            type: string
          example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
        benchmarkPerformance:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: >-
            brief description about model, its goal, basically something sweet
            about it
          example: Speech recognition model for classroom lecture
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
        licenseUrl:
          type: string
          description: url of the custom license
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        submitter:
          $ref: '#/components/schemas/Submitter'
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPointDto'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        version:
          type: string
          example: v1.0
        userId:
          type: string
          example: 61c380072e74fa406e7618ba
        submittedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        publishedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        status:
          type: string
          example: unpublished
        unpublishReason:
          type: string
          example: executing benchmark runs

    BenchmarkProcess:
      type: object
      properties:
        id:
          type: string
          example: 61c380072e74fa406e7618ba
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        benchmarkProcessId:
          type: string
          example: 3338807029
        benchmarkDatasetId:
          type: string
          example: 61c37ef32e74fa406e7618b6
        benchmarkDatasetName:
          type: string
          example: OCR_benchmark_english
        modelName:
          type: string
          example: Anuvaad-OCR-English
        modelVersion:
          type: string
          example: v1.0
        score:
          type: number
          format: double
          example: 8.5
        metric:
          type: string
          example: bleu
        status:
          type: string
          example: Completed/In-Progress/Failed
        createdOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        lastModifiedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        startTime:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        endTime:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        recordCount:
          type: integer
          format: int32
          example: 456098

    ModelHealthStatusResponse:
      type: object
      properties:
        message:
          type: string
        benchmark:
          type: array
          items:
            $ref: '#/components/schemas/ModelHealthStatus'
        count:
          type: integer
          format: int32
    
    ModelHealthStatus:
      type: object
      properties:
        modelId:
          type: string
          example: 61c14e928112f94aa569c688
        modelName:
          type: string
          example: Vakyansh-ASR-Hindi
        taskType:
          type: string
          example: translation
        isSyncApi:
          type: boolean
          example: true
        callbackUrl:
          type: string
          
        pollingUrl:
          type: string
        status:
          type: string
          example: available
        lastStatusUpdate:
          type: string
          example: Mon Nov 08 03:00:00 IST 2021
        nextStatusUpdateTiming:
          type: string
          example: Mon Nov 08 04:00:00 IST 2021

    GetModelFeedbackListResponse:
      type: object
      properties:
        feedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsFeedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        taskType:
          type: string
          example: translation
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsPerformanceId:
          type: string
          example: 61c380072e74fa406e7618ba
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        input:
          type: string
          example: how are you today ?
        output:
          type: string
          example: இன்று நீங்கள் எப்படி இருக்கிறீர்கள்?
        feedback:
          type: object
        createdAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        updatedAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        detailedFeedback:
          type: array
          items:
            $ref: '#/components/schemas/ModelFeedback'
    ModelFeedback:
      type: object
      properties:
        feedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsFeedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        taskType:
          type: string
          example: translation
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsPerformanceId:
          type: string
          example: 61c380072e74fa406e7618ba
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        input:
          type: string
          example: how are you today ?
        output:
          type: string
          example: இன்று நீங்கள் எப்படி இருக்கிற
        feedback:
          type: object
        createdAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        updatedAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022

    BenchmarkSubmitRequest:
      required:
        - datasetName
        - url
        - userId
      type: object
      properties:
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        datasetName:
          type: string
          example: Asr Indic benchmark dataset
        url:
          type: string
          example: https://anuvaad-raw-datasets.s3-us-west-2.amazonaws.com/bm-flores-en-hi.zip
    
    BenchmarkSubmitResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Dataset has been Submitted
        data:
          $ref: '#/components/schemas/BenchmarkSubmitData'
          
    BenchmarkSubmitData:
      type: object
      properties:
        serviceRequestNumber:
          type: string    
          example: 4432197063
        benchmarkId:
          type: string
          example: 61c159f58112f94aa569c68b
        timestamp:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022

    BenchmarkSearchRequest:
      required:
        - task
      type: object
      properties:
        task:
          type: string
          example: translation
        sourceLanguage:
          type: string
          example: en
        targetLanguage:
          type: string
          example: hi     
    BenchmarkSearchResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Search Result
        data:
          type: array
          items:
            $ref: '#/components/schemas/Benchmark'
        count:
          type: integer
          format: int32
          example: 24

    Benchmark:
      required:
        - dataset
        - description
        - domain
        - languages
        - license
        - name
        - submitter
        - task
      type: object
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          example: 6149e0f378af0820a7d2fb28
        name:
          type: string
          description: name of the benchmark
          example: FLORES-101 en-mr Evaluation Benchmark
        version:
          type: string
          description: params schema version
          example: v1.20
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
          
        licenseUrl:
          type: string
          description: url of the custom license
        description:
          maxLength: 200
          minLength: 50
          type: string
          description: description of the benchmark including how it has been curated
          example: benchmark sentences for government press release domain
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        dataset:
          maxLength: 200
          minLength: 50
          type: string
          description: benchmark dataset url
          example: benchmark dataset url
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
          example: ["news"]
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          $ref: '#/components/schemas/LanguagePair'
        submitter:
          $ref: '#/components/schemas/Submitter'
        collectionSource:
          type: array
          properties:
            empty:
              type: boolean
          description: various sources, url from where the information is collected.
          example:
            - https://main.sci.gov.in
          items:
            type: string
            description: various sources, url from where the information is collected.
            example: '["https://main.sci.gov.in"]'
        paramSchema:
          type: object
          description: Object created from params.json
        createdOn:
          type: string
          description: timestamp when benchmark is created
          example: Wed Jul 27 19:02:39 IST 2022
        submittedOn:
          type: string
          description: timestamp when benchmark is submitted/published
          example: Wed Jul 27 19:02:39 IST 2022
        status:
          type: string
          example: Completed
      description: the benchmark dataset for model task.

    BenchmarkListByModelRequest:
      required:
        - modelId
      type: object
      properties:
        modelId:
          type: string
          example: 6149e0f378af0820a7d2fb28

    
    BenchmarkListByModelResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Search Result
        benchmark:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkDto'
        count:
          type: integer
          format: int32
          example: 24

    BenchmarkDto:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/Benchmark'
        - type: object
          required:
            - rootCause
          properties:
            metric:
              type: array
              items:
                type: string
              example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
            availableMetric:
              type: array
              items:
                type: string
              example: ["bleu","meteor","ribes","gleu","bert", "chrf"]

    BenchmarkMetricRequest:
      type: object
      properties:
        benchmarkId:
          type: string
          example: 61c380072e74fa406e7618ba
        metric:
          type: string
          example: bleu
          
    ExecuteBenchmarkRequest:
      type: object
      properties:
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        benchmarks:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkMetricRequest'
    
    ExecuteBenchmarkResponse:
      type: object
      properties:
        benchmarkProcessIds:
          type: array
          items:
            type: string
          example: ["3338807029"]
    
    ExecuteBenchmarkAllMetricRequest:
      type: object
      properties:
        modelId:
          type: string
          example: 6149e0f378af0820a7d2fb28
        benchmarkId:
          type: string
          example: 6149e0f378af0820a7d2fb28
   
    BmProcessListByProcessIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Process list
        data:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        count:
          type: integer
          format: int32
          example: 1

    BenchmarkListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark list by UserId
        benchmark:
          type: array
          items:
            $ref: '#/components/schemas/Benchmark'
        count:
          type: integer
          format: int32
          example: 20
        totalCount:
          type: integer
          format: int32
          example: 192

    GetBenchmarkByIdResponse:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/Benchmark'
        - type: object
          required:
            - metric
          properties:
            metric:
              type: array
              items:
                type: string
              example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
            benchmarkPerformance:
              type: array
              items:
                $ref: '#/components/schemas/BenchmarkProcess'

    HttpErrorResponse:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: status code as encountered in the processing life-cycle
          
        message:
          type: string
          description: human understandable format
        timestamp:
          type: string
          format: datetime

    UserSignupRequest:
      type: object
      required:
        - firstName
        - email
        - password
        - roles
      properties:
        firstName:
          type: string
          description: Firstname of the user to be registered.
        lastName:
          type: string
          description: Lastname of the user to be registered.
        email:
          type: string
          description: email of the user to be registered.
        password:
          type: string
          description: password of the user to be registered.
        roles:
          type: array
          description: Roles assigned to the user to be registered.
          items:
            type: string
        phoneNo:
          type: string
          description: Mobile phone number of the user to be registered.
      example:
        firstName: Ram
        lastName: Kumar
        email: dummy@gmail.com
        password: password
        roles: user
        phoneNo: 9090909090
    GetApiKeyRequest:
      type: object
      required:
        - userID
      properties:
        userID:
          type: string
          description: UserID of the user to be fetched.
      example:
        userID: odjfio930339920oe892d90
    revokeApiKeyRequest:
      type: object
      required:
        - userID
        - ulcaApiKey
      properties:
        userID:
          type: string
          description: UserID of the user to be revoked.
        ulcaApiKey:
          type: string
          description: ulcaApiKey of Ulca user
      example:
        userID: odjfio930339920oe892d90
        ulcaApiKey: odjfi-o930339920-oe892d90
    dataTrackingToggleRequest:
      type: object
      required:
        - userID
        - ulcaApiKey
        - serviceProviderName
        - dataTracking
      properties:
        userID:
          type: string
          description: UserID of the user to be revoked.
        ulcaApiKey:
          type: string
          description: ulcaApiKey of Ulca user
        serviceProviderName:
          type: string
          description: serviceProviderName
        dataTracking:
          type: boolean
          description: dataTracking value
      example:
        userID: odjfio930339920oe892d90
        ulcaApiKey: odjfi-o930339920-oe892d90
        dataTracking: true
        serviceProviderName: somename
    removeServiceProviderKeyRequest:
      type: object
      required:
        - userID
        - ulcaApiKey
        - serviceProviderName
      properties:
        userID:
          type: string
          description: UserID of the user to be revoked.
        ulcaApiKey:
          type: string
          description: ulcaApiKey of Ulca user
        serviceProviderName:
          type: string
          description: serviceProviderName
      example:
        userID: odjfio930339920oe892d90
        ulcaApiKey: odjfi-o930339920-oe892d90
        serviceProviderName: somename
    generateServiceProviderKeyRequest:
      type: object
      required:
        - userID
        - ulcaApiKey
        - pipelineId
        - dataTracking
      properties:
        userID:
          type: string
          description: UserID of the user to be revoked.
        ulcaApiKey:
          type: string
          description: ulcaApiKey of Ulca user
        pipelineId:
          type: string
          description: service pipelineId
        dataTracking:
          type: boolean
          description: dataTracking value
      example:
        userID: odjfio930339920oe892d90
        ulcaApiKey: odjfi-o930339920-oe892d90
        dataTracking: true
        pipelineId: odjfio930339920oe892d90
    generateApiKeyRequest:
      type: object
      required:
        - userID
        - appName
      properties:
        userID:
          type: string
          description: userId of Ulca.
        appName:
          type: string
          description: appname of be generated
      example:
        userID: odjfio930339920oe892d90
        appName: appname
    FetchMasterRequest:
      type: object
      required:
        - masterName
        - jsonPath
      properties:
        masterName:
          type: string
          description: Master name to fetch
        jsonPath:
          type: string
          description: json path of master data
      example:
        masterNames: masteName
        jsonPath: json path  
    FetchMasterBulkRequest:
      type: object
      required:
        - masterNames
      properties:
        masterNames:
          type: string
          description: Master names to be fetched in bulk.
      example:
        masterNames: masteName
    BustCacheRequest:
      type: object
      required:
        - masterNames
      properties:
        masterNames:
          type: string
          description: Master names to be fetched in bulk.
      example:
        masterNames: masteNames
    pipelineQuestionsRequest:
      type: object
      required:
        - feedbackLanguage
        - supportedTasks
      properties:
        feedbackLanguage:
          type: string
          description: Feedback Languages.
        supportedTasks:
          type: string
          description: Tasks supported.
      example:
        feedbackLanguage: en
        supportedTasks: asr
    modelcomputeRequest:
      type: object
      required:
        - userId
        - tasks
        - source
        - ModelId
        - audioContent
        - audioUri
      properties:
        userId:
          type: string
          description: userID.
        Tasks:
          type: string
          description: Tasks supported.
        source:
          type: string
          description: source.
        ModelId:
          type: string
          description: ModelID
        audioContent:
          type: string
          description: audioContent
      example:
        userId: ij9208497lwieur9u1934
        Tasks: tasks
        source: sourced
        ModelId: 99988889998878alisjd
        audioContent: audioContent
        audioUrl: audioUrl
    UserLoginRequest:
      type: object
      properties:
        authenticator:
          $ref: '#/components/schemas/Authenticator'
        data:
          type: object
          description: email and password for user Login
          oneOf:
            - $ref: '#/components/schemas/UlcaLoginAuthenticator'
            - $ref: '#/components/schemas/GmailLoginAuthenticator'
      example:
        authenticator: ULCA
        data:
          email: dummy@gmail.com
          password: password
    getApiKeysForProfileRequest:
      type: object
      required:
        - userID
      properties:
        firstName:
          type: string
          description: Firstname of the user to be registered.
      example:
        firstName: odjfio930339920oe892d90
    ApiKeySearchRequest:
      type: object
      properties:
        key:
          type: string
          description: Unique auth token of verified user
      description: Request for user records.
      example:
        key: 81eb44672d3746b8ac251ca2425c9184
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          description: Unique email of the user.
      description: Request for user records.
      example:
        email: dummy@gmail.com
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          description: Unique email of the user.
        password:
          type: string
          description: password to be updated
      example:
        email: dummy@gmail.com
        password: resetNewPassword
    UserVerificationRequest:
      type: object
      properties:
        email:
          type: string
          description: unique email value.
        userID:
          type: string
          description: unique userid value.
      example:
        email: dummy@gmail.com
        userId: 6a73afa4fc774dcdb28d5fff944511f6
    User:
      type: object
      properties:
        userID:
          type: string
          description: Unique 32-bit UUID per user.
        firstName:
          type: string
          description: FirstName of the user.
        lastName:
          type: string
          description: LastName of the user.
        email:
          type: string
          description: email id of the user.
        oauthId:
          type: string
          description: oauthId of the user.
        oauthProvider:
          type: string
          description: oauthProvider of the user.
        registeredTime:
          type: string
          description: UTC object indicating time of user signup.
        activatedTime:
          type: string
          description: UTC object indicating time of user verification.
        isVerified:
          type: boolean
          description: status of user verification.
        isActive:
          type: boolean
          description: status of user activation.
        phoneNo:
          type: string
          description: mobile number of the user
        roles:
          type: array
          items:
            type: string
    Role:
      type: object
      properties:
        roleId:
          type: string
          description: Unique code per role.
        name:
          type: string
          description: role name.
        description:
          type: string
          description: Description of the role.
    AuthData:
      type: object
      properties:
        email:
          type: string
          description: email of the logged in user.
        publicKey:
          type: string
          description: random uuid key to be used as public key for the logged in user.
        privateKey:
          type: string
          description: hexadecimal uuid key for the logged in user for encrypting request data.
    UserData:
      type: object
      properties:
        userKeys:
          $ref: '#/components/schemas/AuthData'
        userDetails:
          $ref: '#/components/schemas/User'
    Status:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          type: object
          description: data returned by the request.
        count:
          type: integer
          description: count of data items.
    UserVerificationResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/AuthData'
        count:
          type: integer
          description: count of data items.
    UserLoginResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/UserData'
        count:
          type: integer
          description: count of data items.
    ApiKeySearchResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/UserData'
        count:
          type: integer
          description: count of data items.
    UlcaLoginAuthenticator:
      type: object
      properties:
        email:
          type: string
          description: email of user
        password:
          type: string
          description: password of user
    GmailLoginAuthenticator:
      type: object
      properties:
        token_type:
          type: string
          description: token type
        access_token:
          type: string
          description: token type
        scope:
          type: string
          description: scope
        login_hint:
          type: string
          description: login_hint
        expires_in:
          type: number
          description: expires_in
        id_token:
          type: number
          description: id_token
        session_state:
          type: object
          description: session_state
          properties:
            extraQueryParams:
              type: string
              description: extraQueryParams
            authuser:
              type: number
              description: authuser
    Authenticator:
      type: string
      enum:
        - ULCA
        - GMAIL
        - GITHUB
        - FACEBOOK
        - LINKEDIN
    ErrorReportRequest:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          description: Unique submission id.
      description: Request for error report on a particular submission.
      example:
        serviceRequestNumber: 1160112134
    ErrorReportResponse:
      type: object
      properties:
        file:
          type: string
          description: File path to object store.
        internal_file:
          type: string
          description: Internal file path.
        serviceRequestNumber:
          type: string
          description: Unique id for dataset submission
        time_stamp:
          type: string
          description: Report generated date and time.
        count:
          type: integer
          description: Count of errors uploaded on to object store.
        uploaded:
          type: boolean
          description: status of file upload.
    SupportedLanguages:
      type: string
      description: This attribute defines the  language codes(iso-639-1, iso 639-2) supported under ULCA
      enum:
        - en
        - hi
        - mr
        - ta
        - te
        - kn
        - gu
        - pa
        - bn
        - ml
        - as
        - brx
        - doi
        - ks
        - kok
        - mai
        - mni
        - ne
        - or
        - sd
        - si
        - ur
        - sat
        - lus
        - njz
        - pnr
        - kha
        - grt
        - sa
        - raj
        - bho
        - gom
        - awa
        - hne
        - mag
        - mwr
        - sjp
        - gbm
        - tcy
        - hlb
        - bih
        - anp
        - bns
        - mixed
        - unknown
    SupportedScripts:
      type: string
      description: This attribute defines the  Script codes(ISO 15924) supported under ULCA, code reference available at - `https://unicode.org/iso15924/iso15924-codes.html' 
      enum:
        - Beng
        - Deva
        - Thaa
        - Gujr
        - Aran
        - Orya
        - Guru
        - Arab
        - Sinh
        - Knda
        - Mlym
        - Taml
        - Telu
        - Mtei
        - Olck
        - Latn
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: key
    apiSig:
      type: apiKey
      in: header
      name: sig
      description: signed request url or body
security:
  - apiKey: []
    apiSig: []